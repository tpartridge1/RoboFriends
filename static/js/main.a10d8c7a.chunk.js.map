{"version":3,"sources":["components/ErrorBoundry/ErrorBoundry","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","repsonse","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,0C,4ICc5BC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACC,4BAAKF,GACJ,2BAAIC,MCeKK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAChB,OACF,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACnB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCCNW,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACE,yBAAKX,UAAW,OAChB,2BACAA,UAAU,mCAAmCY,KAAK,SAClDC,YAAY,gBACZC,SAAUH,MCEEI,EATA,SAACC,GACf,OACA,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UACnEJ,EAAMK,WC+COC,G,wBAxCd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACb,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAb7C,EAAKC,MAAQ,CACZxB,OAAQ,GACFM,YAAa,IAJP,E,iFAQO,IAAD,OACnBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAErB,OAAQ6B,S,+BAO7B,IAAD,EACsBC,KAAKN,MAA5BxB,EADC,EACDA,OAAQM,EADP,EACOA,YACTyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GAChC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAE1D,OAAQlC,EAAOoC,OAGhB,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC5B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAQ+B,MANpB,2C,GAzBcM,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.a10d8c7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ErrorBoundry.9b390e70.bin\";","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n  \t<div className='tc bg-light-green dib br3 pd3 ma2 grow bw2 shadow 5'>\r\n  \t <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n  \t <div>\r\n  \t  <h2>{name}</h2>\r\n  \t   <p>{email}</p>\r\n  \t </div>\r\n  \t</div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n   return (\r\n\t<div>\r\n\t{\r\n\t  robots.map((user, i) => {\r\n\t\treturn (\r\n\t\t <Card \r\n\t\t  key={i} \r\n\t\t  id={robots[i].id} \r\n\t\t  name={robots[i].name} \r\n\t\t  email={robots[i].email}\r\n\t\t />\r\n      );\r\n\t})\r\n\t}\r\n\t</div>\r\n );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t  <div className= 'pd2'>\r\n\t  <input \r\n\t  className='pa3 ba b--green bg-lightest-blue' type='search' \r\n\t  placeholder='search robots'\r\n\t  onChange={searchChange}\r\n      />\r\n </div>\r\n );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t<div style={{overflowY: 'scroll', border: '5px solid black', height:'800px'}}>\r\n\t{props.children}\r\n\t</div>\r\n    );\r\n   };\t\r\n\r\n\r\nexport default Scroll; \r\n\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t        searchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(repsonse => repsonse.json())\r\n\t\t.then(users => this.setState({ robots: users}))\t\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n      this.setState({searchfield: event.target.value})\r\n\t}\r\n\r\n\trender () {\r\n\t  const {robots, searchfield} = this.state;\r\n\t  const filteredRobots = robots.filter(robot => {\r\n       \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n       })\r\n\t  return !robots.length ?\r\n\t  \t<h1>Loading</h1> :\r\n     (\r\n\t <div className='tc'>\r\n\t   <h1 className='fi'>Robofriends</h1>\r\n\t   <SearchBox searchChange={this.onSearchChange}/>\r\n\t     <Scroll>\r\n\t     <CardList robots={filteredRobots}/>\r\n\t     </Scroll>\r\n\t  </div>\r\n\t);\r\n  }\r\n }\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport './containers/index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App/> ,document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}